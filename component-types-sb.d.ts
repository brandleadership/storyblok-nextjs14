// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from 'storyblok';
export interface FooterStoryblok {
    copyright?: string;
    component: 'footer';
    _uid: string;
    [k: string]: any;
}

export interface GlobalStoryblok {
    global?: (
        | FooterStoryblok
        | GlobalStoryblok
        | GlobalReferenceStoryblok
        | HeaderStoryblok
        | HeroStoryblok
        | PageStoryblok
        | RichtextExampleStoryblok
    )[];
    component: 'global';
    _uid: string;
    [k: string]: any;
}

export interface GlobalReferenceStoryblok {
    reference?: (ISbStoryData<GlobalStoryblok> | string)[];
    component: 'global_reference';
    _uid: string;
    [k: string]: any;
}

export interface AssetStoryblok {
    alt: string | null;
    copyright?: string | null;
    fieldtype: 'asset';
    id: number;
    filename: string | null;
    name: string;
    title: string | null;
    focus: string | null;
    meta_data?: {
        [k: string]: any;
    };
    source?: string | null;
    is_external_url?: boolean;
    is_private?: boolean;
    src?: string;
    updated_at?: string;
    width?: number | null;
    height?: number | null;
    aspect_ratio?: number | null;
    public_id?: string | null;
    content_type?: string;
    [k: string]: any;
}

export type MultilinkStoryblok =
    | {
          fieldtype: 'multilink';
          id: string;
          url: string;
          cached_url: string;
          target?: '_blank' | '_self';
          anchor?: string;
          rel?: string;
          title?: string;
          prep?: string;
          linktype: 'story';
          story?: {
              name: string;
              created_at?: string;
              published_at?: string;
              id: number;
              uuid: string;
              content?: {
                  [k: string]: any;
              };
              slug: string;
              full_slug: string;
              sort_by_date?: null | string;
              position?: number;
              tag_list?: string[];
              is_startpage?: boolean;
              parent_id?: null | number;
              meta_data?: null | {
                  [k: string]: any;
              };
              group_id?: string;
              first_published_at?: string;
              release_id?: null | number;
              lang?: string;
              path?: null | string;
              alternates?: any[];
              default_full_slug?: null | string;
              translated_slugs?: null | any[];
              [k: string]: any;
          };
          [k: string]: any;
      }
    | {
          fieldtype: 'multilink';
          id: string;
          url: string;
          cached_url: string;
          target?: '_blank' | '_self';
          linktype: 'url';
          rel?: string;
          title?: string;
          [k: string]: any;
      }
    | {
          fieldtype: 'multilink';
          id: string;
          url: string;
          cached_url: string;
          target?: '_blank' | '_self';
          email?: string;
          linktype: 'email';
          [k: string]: any;
      }
    | {
          fieldtype: 'multilink';
          id: string;
          url: string;
          cached_url: string;
          target?: '_blank' | '_self';
          linktype: 'asset';
          [k: string]: any;
      };

export interface HeaderStoryblok {
    logo?: AssetStoryblok;
    link_one?: Exclude<
        MultilinkStoryblok,
        { linktype?: 'email' } | { linktype?: 'asset' }
    >;
    link_one_text?: string;
    link_two?: Exclude<
        MultilinkStoryblok,
        { linktype?: 'email' } | { linktype?: 'asset' }
    >;
    link_two_text?: string;
    link_three?: Exclude<
        MultilinkStoryblok,
        { linktype?: 'email' } | { linktype?: 'asset' }
    >;
    link_three_text?: string;
    component: 'header';
    _uid: string;
    [k: string]: any;
}

export interface HeroStoryblok {
    title?: string;
    text?: string;
    component: 'hero';
    _uid: string;
    [k: string]: any;
}

export interface PageStoryblok {
    body?: (
        | FooterStoryblok
        | GlobalStoryblok
        | GlobalReferenceStoryblok
        | HeaderStoryblok
        | HeroStoryblok
        | PageStoryblok
        | RichtextExampleStoryblok
    )[];
    component: 'page';
    _uid: string;
    [k: string]: any;
}

export interface RichtextStoryblok {
    type: string;
    content?: RichtextStoryblok[];
    marks?: RichtextStoryblok[];
    attrs?: any;
    text?: string;
    [k: string]: any;
}

export interface RichtextExampleStoryblok {
    title?: string;
    text?: RichtextStoryblok;
    component: 'richtext_example';
    _uid: string;
    [k: string]: any;
}
